@page "/ViewPost/{id:int}"
@using HttpClients.ClientInterfaces
@using Assignment1.Models
@using Assignment1.DTOs
@using System.Security.Claims
@inject IPostService PostService;
@inject ICommentService CommentService;
@inject IVoteService VoteService;
@inject NavigationManager NavMgr


@if (_post == null)
{
    <label>Loading...</label>
}
<div class="card" style="width: 100%">
    <div class="post-header">
        <div class="user-info">
            <img class="avatar" src="img/avatar.png"/>
            <h6 class="username">@_post.Author.Username</h6>
        </div>
    </div>
    <h4 id="postTitle">@_post.Title</h4>
    <p class="postBody">@_post.Body</p>
    <div class="action-buttons">
        <div id="LikeButton">
            <LikeButton PostId="@Id"/> 
            <div>@_numberOfPositiveVotes</div>
        </div>
        <div id="DisLikeButton">
            <DisLikeButton PostId="@Id"/>
            <div>@_numberOfNegativeVotes</div>
        </div>
    </div>
</div>
<h4 style="font-weight: bold">Comments :</h4>
 @foreach (var item in _comments)
    {
        <div class="card" style="width: 100%">
            <div class="post-header">
                <div class="user-info">
                    <img class="avatar" src="img/avatar.png"/>
                    <h6 class="username"> @item.Author.Username</h6>
                </div>
                </div>
            <p class="postBody"> @item.Body</p>
        </div>
    }
<div class="card" style="width: 100%">
    <div id="commentLine">
        <textarea placeholder="Write a comment" @bind="_commentBody"></textarea>
        <button id="commentbtn" @onclick="Create" class="acceptbtn">Comment</button>
    </div>
</div>
<div>@_msg</div>

@code {
    
    [Parameter]
    public int Id { get; set; }
    
    
    private Post? _post;
    private IEnumerable<Comment>? _comments;
    private string _commentBody = "";
    private string _msg = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string _userName;
    private bool _isLoggedIn;

    private int _numberOfPositiveVotes = 0;
    private int _numberOfNegativeVotes = 0;
   
    protected override async Task OnInitializedAsync()
    {
        _msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        
        if (!_isLoggedIn) return;
        _userName = user.Identity!.Name!;
        try
        {
            ICollection<Post?> postData = await PostService.GetAsync(Id, null, null, null);
            _post = postData.FirstOrDefault(p => p.Id == Id);
            _comments = await CommentService.GetAsync(Id, null, null);

            ICollection<Vote> voteData = await VoteService.GetAsync(Id, null);
            _numberOfPositiveVotes = voteData.Count(v => v.IsPositive == true && v.Post.Id ==Id);
            _numberOfNegativeVotes = voteData.Count(v => v.IsPositive == false && v.Post.Id ==Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
        
    }

    private async Task Create()
    {
        if (string.IsNullOrEmpty(_commentBody))
        {
            _msg = "Comment cannot be empty!";
            return;
        }
        try
        {
            CommentCreationDto dto = new CommentCreationDto(_userName, Id, _commentBody);
            await CommentService.CreateAsync(dto);
            _commentBody = "";
            NavMgr.NavigateTo("/");
            NavMgr.NavigateTo($"/ViewPost/{Id}");
            

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
    }
}