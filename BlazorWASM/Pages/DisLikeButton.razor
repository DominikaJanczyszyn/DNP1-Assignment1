@using Assignment1.Models
@using System.Security.Claims
@using Assignment1.DTOs
@using HttpClients.ClientInterfaces
@inject IVoteService VoteService;
@inject IPostService PostService;
@inject IUserService UserService;
@inject NavigationManager NavMgr
@attribute [Authorize]
@if (Vote != null)
{
   @if (Vote.IsPositive == false)
   {
        <img class="icon" src="img/dislikeAdded.png" @onclick="UndoDisLike"/>  
   }
   @if (Vote.IsPositive|| Vote.IsPositive == null)
   {
       <img class="icon" src="img/dislike.png" @onclick="DisLike"/>  
   } 
}
else
{
    <img class="icon" src="img/dislike.png" @onclick="DisLike"/>  
}

@code {
    [Parameter]
    public int PostId { get; set; }
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? _userName;
    private bool _isLoggedIn;

    private Vote Vote;
    private User User;
    private Post? Post;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            _isLoggedIn = user.Identity != null;

            if (!_isLoggedIn) return;
            _userName = user.Identity!.Name!;

            ICollection<Vote> voteData = await VoteService.GetAsync(PostId, _userName);
            Vote = voteData.First(v => (v.Post.Id == PostId && v.Author.Username.Equals(_userName)));

            IEnumerable<User> userData = await UserService.GetAsync(_userName);
            User = userData.First(u => u.Username.Equals(_userName));

            ICollection<Post?> postData = await PostService.GetAsync(PostId, null, null, null);
            Post = postData.First(p => p.Id == PostId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }



    }
    private async void DisLike()
    {
        if (Vote == null)
        {
            VoteCreationDto dto = new VoteCreationDto(_userName, PostId, false);
            await VoteService.CreateAsync(dto);
        }
        else
        {
            
            UpdateVoteDto dto = new UpdateVoteDto(_userName, PostId, false);
            await VoteService.UpdateAsync(dto);
        }
        NavMgr.NavigateTo("/");
        NavMgr.NavigateTo($"/ViewPost/{PostId}");
        
        
    }

    private async void UndoDisLike()
    {
        if (Vote != null)
        {
         await VoteService.DeleteAsync(Vote.Id);
                 NavMgr.NavigateTo("/");
                 NavMgr.NavigateTo($"/ViewPost/{PostId}");   
        }
    }
}