@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using Assignment1.DTOs
@using Assignment1.Models
@inject IPostService PostService
@inject NavigationManager NavMgr
@attribute [Authorize]
@using System.Security.Claims
<div class="card">
        <div class="form-group field">
            
            <input type="text" placeholder="Title" @bind="_postTitle">
        </div>
        <div class="form-group field">
            <textarea placeholder="Write a post." @bind="_postBody"></textarea>
        </div>
    <div class="button-row">
        <button @onclick="Create" class="acceptbtn">Post</button>
    </div>
    <div>@_msg</div>
</div>
@code {
    private string _postTitle = "";
    private string _postBody = "";
    private string _msg = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? _userName;
    private bool _isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        _msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        
        if (!_isLoggedIn) return;
        _userName = user.Identity!.Name!;

    }

    private async Task Create()
    {
        _msg = "";
        if (string.IsNullOrEmpty(_postTitle))
        {
            _msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(_postBody))
        {
            _msg = "Body cannot be empty!";
            return;
        }
        try
        {
            PostCreationDto dto = new(_userName, _postTitle, _postBody);
            await PostService.CreateAsync(dto);
            _postTitle = "";
            _postBody = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _msg = e.Message;
        }
        NavMgr.NavigateTo(NavMgr.Uri);
    }
}